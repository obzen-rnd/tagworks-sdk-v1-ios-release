//
//  TagWorksBase.swift
//  TagWorks-iOS-v1
//
//  Created by Digital on 7/16/24.
//

import Foundation
import WebKit

/// TagWorksÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî UserDefault Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§ÏûÖÎãàÎã§.
internal struct TagWorksBase {
    
    /// UserDefault Í∞ùÏ≤¥ÏûÖÎãàÎã§.
    private let userDefaults: UserDefaults
    
    private let keychainStorage = KeychainStorage.sharedInstance
    private var isEnableKeychain = true
    
    /// UserDefault Ïù∏Ïä§ÌÑ¥Ïä§ Ï¥àÍ∏∞ÌôîÏãú ÏßÄÏ†ïÌïòÎäî ÏãùÎ≥ÑÏûêÏûÖÎãàÎã§.
    /// - Parameter suitName: UserDefault ÏãùÎ≥ÑÏûê
    init(suitName: String?){
        self.userDefaults = UserDefaults(suiteName: suitName)!
        
        // ÌÇ§Ï≤¥Ïù∏Ïóê Ï†ÄÏû•Ìï† Ïö©ÎèÑÎ°ú ÏÇ¨Ïö©
        let result = keychainStorage.migrate()
        if result == false {
            if #available(iOS 11.3, *) {
                let secCopyError = SecCopyErrorMessageString(keychainStorage.lastErrorStatus, nil)!
                print("üíÅ‚Äç‚ôÇÔ∏è[TagWorks v\(CommonUtil.getSDKVersion()!)] Keychain migrate error: \(secCopyError)")
            }
        }
    }
    
    /// Ïú†Ï†Ä ÏãùÎ≥ÑÏûê (Í≥†Í∞ù ÏãùÎ≥ÑÏûê)Î•º Ï†ÄÏû• Î∞è Î∞òÌôòÌï©ÎãàÎã§.
    /// Í∏∞Ï°¥ÏóêÎäî userIdÎ•º Î°úÏª¨Ïóê Ï†ÄÏû• ÌõÑ ÏÇ¨Ïö©ÌñàÏßÄÎßå, userId ÏÖãÌåÖÏùÑ ÌÜµÌï¥ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎ•º Ï≤¥ÌÅ¨ Ïö©ÎèÑÎ°ú ÏÇ¨Ïö©ÌïòÍ∏∞Ïóê Î°úÏª¨ ÌååÏùºÏóê Ï†ÄÏû•ÌïòÏßÄ ÏïäÎèÑÎ°ù Î≥ÄÍ≤Ω - Ïû•Îì±Ïàò ÏÉÅÎ¨¥, Ïù¥ÌòÑÏßÑ Ï∞®Ïû• Ìï©Ïùò
    /// 2025. 04. 18 by Kevin
//    public var userId: String? {
//        get {
//            return userDefaults.string(forKey: UserDefaultKey.userId)
//        }
//        set {
//            userDefaults.setValue(newValue, forKey: UserDefaultKey.userId)
//            userDefaults.synchronize()
//        }
//    }
    
    /// Î∞©Î¨∏Ïûê ÏãùÎ≥ÑÏûêÎ•º Ï†ÄÏû• Î∞è Î∞òÌôòÌï©ÎãàÎã§.
    /// Ïï±ÏùÑ ÏÇ≠Ï†úÌï¥ÎèÑ Î≥ÄÌïòÏßÄ ÏïäÎèÑÎ°ù ÌÇ§Ï≤¥Ïù∏ÏùÑ Ïù¥Ïö©ÌïòÏó¨ Ï†ÄÏû• Î∞è Î∞òÌôòÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω - by Kevin 2024.07.16
    public var visitorId: String? {
        get {
//            return userDefaults.string(forKey: UserDefaultKey.visitorId)
            return keychainStorage.findOrCreate()
        }
        set {
//            userDefaults.setValue(newValue, forKey: UserDefaultKey.visitorId)
//            userDefaults.synchronize()
            _ = keychainStorage.renew()
        }
    }
    
    /// ÏàòÏßë ÌóàÏö© Ïó¨Î∂ÄÎ•º Ï†ÄÏû• Î∞è Î∞òÌôòÌï©ÎãàÎã§.
    public var optOut: Bool {
        get {
            return userDefaults.bool(forKey: UserDefaultKey.optOut)
        }
        set {
            userDefaults.setValue(newValue, forKey: UserDefaultKey.optOut)
            userDefaults.synchronize()
        }
    }
    
    
    
    
//    func prepareWebConfiguration(completion: @escaping (WKWebViewConfiguration?) -> Void) {
//        let urlString = "www.obzen.com"
//        guard let url = URL(string: urlString) else { return }
//        
//        if #available(iOS 11.0, *) {
//            let uidCookie = HTTPCookie(properties: [
//                .domain: "Ïø†ÌÇ§ÎåÄÏÉÅ domain(xxx.com)",
//                .path: "/",
//                .name: "uid",
//                .value: "<ÏÇ¨Ïö©Ïûê ÏãùÎ≥ÑÏûê>",
//                .secure: "TRUE",
//                .expires: NSDate(timeIntervalSinceNow: 31556926) // ÌååÎùºÎØ∏ÌÑ∞ Í∞íÏùÄ second
//            ])!
//            let ozvidCookie = HTTPCookie(properties: [
//                .domain: "Ïø†ÌÇ§ÎåÄÏÉÅ domain(xxx.com)",
//                .path: "/",
//                .name: "ozvid",
//                .value: TagWorks.instance.visitorId,
//                .secure: "TRUE",
//                .expires: NSDate(timeIntervalSinceNow: 31556926) // ÌååÎùºÎØ∏ÌÑ∞ Í∞íÏùÄ second
//            ])!
//            let config = WKWebViewConfiguration()
//            var wkPool = WKProcessPool()
//            config.processPool = wkPool
//            var webView = WKWebView(frame: .zero, configuration: config)
//            webView.configuration.websiteDataStore.httpCookieStore.setCookie(uidCookie)
//            webView.configuration.websiteDataStore.httpCookieStore.setCookie(ozvidCookie)
//            
//            let request = URLRequest(url: url)
//            webView.load(request)
//            
//        } else {
//            // frameRectÎäî ÎßûÏ∂∞ÏÑú ÏûëÏÑ±
//            var webView = WKWebView(frame: .zero)
//            var request: NSMutableURLRequest = NSMutableURLRequest(url: url)
//            var valueString = "uid='ÏÇ¨Ïö©Ïûê ÏãùÎ≥ÑÏûê';ozvid=\(TagWorks.instance.visitorId)"
//            request.addValue(valueString, forHTTPHeaderField: "Cookie")
//            webView.load(request as URLRequest)
//        }
//    }
}

//@available(iOS 11.0, *)
//extension WKWebViewConfiguration {
//    static func includeCookie(cookies: [HTTPCookie], completion: @escaping (WKWebViewConfiguration?) -> Void) {
//        let config = WKWebViewConfiguration()
//        let dataStore = WKWebsiteDataStore.nonPersistent()
//
//        DispatchQueue.main.async {
//            let waitGroup = DispatchGroup()
//
//            for cookie in cookies {
//                waitGroup.enter()
//                dataStore.httpCookieStore.setCookie(cookie) {
//                    waitGroup.leave()
//                }
//            }
//
//            waitGroup.notify(queue: DispatchQueue.main) {
//                config.websiteDataStore = dataStore
//                completion(config)
//            }
//        }
//    }
//}
